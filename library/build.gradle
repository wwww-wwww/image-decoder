plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id "com.dorongold.task-tree" version "4.0.0"
}

group = 'tachiyomiorg'

android {
    namespace = 'tachiyomi.decoder'

    compileSdkVersion 33
    ndkVersion "26.3.11579264"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
            }
        }

        ndk {
            // abiFilters 'arm64-v8a'
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1+'
        }
    }
}

dependencies {
    androidTestImplementation 'androidx.test:core:1.6.1'
    androidTestImplementation 'androidx.test:core-ktx:1.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.2.1'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.test:runner:1.6.2"
}

task printTaskInputs {
    doLast {
        project.getTasks().each { task ->

            if (!task.name.startsWith('buildCMakeDebug')) {
                return
            }

            println "--------------------------------------------------------------------------------"
            println " Task '${project.name}:${task.name}'"
            println "--------------------------------------------------------------------------------"
            println ""

            println "File inputs:"
            try {
                task.inputs.files.each {
                    println " - ${it}"
                }
            } catch (e) {
                println "Error ${e}"
            }
            println ""

            println "Property inputs:"
            try{
                task.inputs.properties.each {
                    println " - ${it}"
                }
            } catch (e) {
                println "Error ${e}"
            }
            println ""

            println "File outputs:"
            try {
                task.outputs.files.each {
                    println " - ${it}"
                }
                task.outputs.properties.each {
                    println " - ${it}"
                }
                task.outputs.upToDateSpec.getSpecs().each {
                    println " * ${it}"
                }
            } catch (e) {
                println "Error ${e}"
            }
            println ""

            println "Dependencies"
            try {
                task.getDependsOn().each {
                    println "- ${it}"
                }
            } catch (e) {
                println "Error ${e}"
            }

            println "--------------------------------------------------------------------------------"
            println ""
        }
    }
}

tasks.configureEach { task ->
    if (task.name.startsWith('buildCMakeDebug')) {
        task.inputs.files(fileTree("src/main/cpp/"))
        task.outputs.upToDateSpec = AndSpec.EMPTY
        outputs.upToDateWhen { true }
    }
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = 'tachiyomiorg'
                artifactId = 'image-decoder'
                version = '1.0'
            }
        }
    }
}
